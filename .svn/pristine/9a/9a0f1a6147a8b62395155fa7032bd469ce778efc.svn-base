package com.ezdk.code.generator.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import freemarker.core.ParseException;
import freemarker.template.Configuration;
import freemarker.template.MalformedTemplateNameException;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateNotFoundException;
import net.sf.json.JSONObject;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.ezdk.code.generator.beans.JavaObject;


public class CodeGenerator
{ 
	private static final String TEMPLATE_FOLDER_PATH = "/com/ezdk/code/java/templates/";

	@SuppressWarnings("deprecation")
	public static void GetJavaBean(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException, ServletException, TemplateException 
	{
    		Template template=null;
    		Writer file=null;
    		ObjectMapper mapper = new ObjectMapper();
    		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {
			
			Configuration cfg = new Configuration();
			cfg.setClassForTemplateLoading(CodeGenerator.class, TEMPLATE_FOLDER_PATH);
			cfg.setDefaultEncoding("UTF-8");
			String JavaType = request.getParameter("JavaType");
			String Bean = request.getParameter("Bean");
			String DAO = request.getParameter("DAO");
			String Servlet = request.getParameter("Servlet");
			
			switch(JavaType) {
				case"Basic Java":
					if(Bean.equals("true")) {
						template = cfg.getTemplate("JavaBean.ftl");
					}
					else if(DAO.equals("true")){
						template = cfg.getTemplate("JavaDao.ftl");
					}
					else if(Servlet.equals("true")) {
						template = cfg.getTemplate("JavaServlet.ftl");
					}
					break;
				case"Spring Boot":
					break;
				case"Struts":
					break;
			}	
			
			String jsonData = request.getParameter("json");
			String className = request.getParameter("className");
			
			if (!jsonData.isEmpty()) {
				List<JavaObject> myObjects = mapper.readValue(jsonData, new TypeReference<List<JavaObject>>() {
				});
				List<JavaObject> objects = new ArrayList<JavaObject>();
				dataMap.put("package", CodeGenerator.class.getPackage() + ";");
				dataMap.put("name", className);
				for (int i = 0; i < myObjects.size(); i++) {
					objects.add(new JavaObject(myObjects.get(i).getVariableName(), myObjects.get(i).getVariableType()));
				}

				dataMap.put("objects", objects);
				
				switch(JavaType) {
				case"Basic Java":
					if(Bean.equals("true")) {
						file = new FileWriter(new File("C:\\Temp\\" + className + "Bean" + ".java"));
					}
					else if(DAO.equals("true")){
						file = new FileWriter(new File("C:\\Temp\\" + className + "DAO" + ".java"));
					}
					else if(Servlet.equals("true")) {
						template = cfg.getTemplate("JavaServlet.ftl");
					}
					break;
				case"Spring Boot":
					break;
				case"Struts":
					break;
			}
				
				
				//
				//file = new FileWriter(new File("C:\\Temp\\" + className + ".java"));
				template.process(dataMap, file);
				file.flush();
				
				PrintWriter out = response.getWriter();
				response.setContentType("application/json");	
				
				String filePath = "C:\\Temp\\" + className + "Bean" + ".java";
				//String filePath = "C:\\Temp\\" + className + "DAO" + ".java";
				//String filePath = "C:\\Temp\\" + className + ".java";
				JSONObject myObj = new JSONObject();			
				myObj.put("success", true);
				myObj.put("filePath", filePath);
				out.println(myObj.toString());
			} else {

			}
		} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/*public static String JT(HttpServletRequest request)
    {
		//String JavaType = request.getParameter("JavaType");
		String Bean = request.getParameter("Bean");
		System.out.println(Bean);
		//String DAO = request.getParameter("DAO");
		//String Servlet = request.getParameter("Servlet");
		String t = null;
		if(Bean.equals("true")) {
			t = "JavaBean.ftl";
		}
		System.out.println(t);
		return t;
	}*/
	
	@SuppressWarnings("deprecation")
	public static void GetJavaDao(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException, ServletException, TemplateException 
	{
    		Template template=null;
    		Writer file=null;
    		ObjectMapper mapper = new ObjectMapper();
    		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {

			Configuration cfg = new Configuration();
			cfg.setClassForTemplateLoading(CodeGenerator.class, TEMPLATE_FOLDER_PATH);
			cfg.setDefaultEncoding("UTF-8");
			template = cfg.getTemplate("JavaDao.ftl");
			
			String jsonData = request.getParameter("json");
			String className = request.getParameter("className");
			
			if (!jsonData.isEmpty()) {

				List<JavaObject> myObjects = mapper.readValue(jsonData, new TypeReference<List<JavaObject>>() {
				});
				List<JavaObject> objects = new ArrayList<JavaObject>();

				dataMap.put("package", CodeGenerator.class.getPackage() + ";");
				dataMap.put("name", className);
				dataMap.put("tableName",myObjects.get(0).getTableName());
				
				
				for (int i = 0; i < myObjects.size(); i++) {
					objects.add(new JavaObject(myObjects.get(i).getColumnName(), myObjects.get(i).getDataType(), myObjects.get(i).getVariableName(), myObjects.get(i).getVariableType(), myObjects.get(i).getNullable()));
				}
				dataMap.put("objects", objects);

				file = new FileWriter(new File("C:\\Temp\\" + className + "DAO" + ".java"));
				template.process(dataMap, file);
				file.flush();
				
				PrintWriter out = response.getWriter();
				response.setContentType("application/json");	
				
				String filePath = "C:\\Temp\\" + className + "DAO" + ".java";
				JSONObject myObj = new JSONObject();			
				myObj.put("success", true);
				myObj.put("filePath", filePath);
				out.println(myObj.toString());
			} else {

			}
		} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("deprecation")
	public static void GetJavaServlet(HttpServletRequest request, HttpServletResponse response) throws SQLException, IOException, ServletException, TemplateException 
	{
    		Template template=null;
    		Writer file=null;
    		ObjectMapper mapper = new ObjectMapper();
    		Map<String, Object> dataMap = new HashMap<String, Object>();
		try {

			Configuration cfg = new Configuration();
			cfg.setClassForTemplateLoading(CodeGenerator.class, TEMPLATE_FOLDER_PATH);
			cfg.setDefaultEncoding("UTF-8");
			template = cfg.getTemplate("JavaServlet.ftl");
			
			String jsonData = request.getParameter("json");
			String className = request.getParameter("className");
			
			if (!jsonData.isEmpty()) {

				List<JavaObject> myObjects = mapper.readValue(jsonData, new TypeReference<List<JavaObject>>() {
				});
				List<JavaObject> objects = new ArrayList<JavaObject>();

				dataMap.put("package", CodeGenerator.class.getPackage() + ";");
				dataMap.put("name", className);
				dataMap.put("tableName",myObjects.get(0).getTableName());

				for (int i = 0; i < myObjects.size(); i++) {
					objects.add(new JavaObject(myObjects.get(i).getColumnName(), myObjects.get(i).getDataType(), myObjects.get(i).getVariableName(), myObjects.get(i).getVariableType(), myObjects.get(i).getNullable()));
				}

				dataMap.put("objects", objects);

				file = new FileWriter(new File("C:\\Temp\\" + className + ".java"));
				template.process(dataMap, file);
				file.flush();
				
				PrintWriter out = response.getWriter();
				response.setContentType("application/json");	
				
				String filePath = "C:\\Temp\\" + className + ".java";
				JSONObject myObj = new JSONObject();			
				myObj.put("success", true);
				myObj.put("filePath", filePath);
				out.println(myObj.toString());
			} else {

			}
		} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
}
Ext.define('ezdk-generator.view.ContractGridWin', {
	extend : 'Ext.window.Window',
	id : 'del-order-scheduler-win',
	title : '<i class="fas fa-clipboard-check fa-2x"></i><span style="font-size:20px;">&emsp;Delivery Order(s) Schedule</span>',
	layout : 'fit',
	autoShow : true,
	frame : true,
	waitMsgBox : {},
	contractListStore : new Ext.data.Store ( {
		proxy : {
			type : 'ajax',
			url : contextRoot + '/jlookup?lookupId=300',
			reader : {
				type : 'json',
				root : 'data',
				rootProperty : 'data',
				totalProperty : 'totalCount',
				successProperty : 'success'
			}
		},
		listeners: {
			beforeload: function ( store, records, successful, operation, eOpts ) {
				var customerCode = Ext.getCmp('customer-location').getValue();
	    		store.proxy.extraParams.customerCode = customerCode;
	    	}
		},
		autoLoad : false
	} ),
	listeners : {
		beforeclose : function(win) {
			if (win.closeMe) {
				win.closeMe = false;
				return true;
			}
			Ext.Msg.confirm('Warning',
					'Do you want to close this window?',
					function(id, value) {
						if (id === 'yes') {
							win.closeMe = true;
							win.close();
						}
					});
			return false;
		}
	},
	initComponent : function() {
		this.mainPanel = this.createMainPanel();
		this.items = [ this.mainPanel ];
		this.buttons = this.createButtons();
		this.on('afterrender', this.adjustWin);
		this.callParent();
	},
	createMainPanel : function() {
		let	searchTabs = this.createSearchTabs();
		let searchResultGrid = this.createSearchResult();
		let	mainPanel = {
			xtype : 'panel',
			layout : 'border',
			frame: true,
			items : [ { region: 'north' , layout: 'fit' , items : [ searchTabs ] } , { region: 'center' , layout: 'fit' , items : [ searchResultGrid ] } ]
		};
		return mainPanel;
	},
	getSelectedRecordsAsIn : function () {
		var recordsIn = '';
		var gridResult = Ext.getCmp('del-order-scheduler-win.result');
		var selectedRecords = gridResult.getView().getSelectionModel().getSelection();
		for ( i = 0 ; i < selectedRecords.length ; i ++ ) {
			var delOrderRecord = selectedRecords [ i ];
			var delOrderNum = delOrderRecord.get ('node9');
			if ( recordsIn != '' ) {
				recordsIn = recordsIn + ' , ' ;
			}
			recordsIn = recordsIn + '\'' + delOrderNum + '\'';
		}
		return recordsIn;
		
	},
	getCustomerBalanceFailed : function(response, options) {
		this.waitMsgBox.hide();
		var respText = response.responseText;
		showErrorMessage('Failed', respText);
	},
	getCustomerBalanceSuccess : function(response, options) {
		this.waitMsgBox.hide();
		var json = eval("(" + response.responseText + ")");
		var success = json.success;
		if (success) {
			var rec = json.data[0];
			if (rec != undefined) {
				customerBalance = rec.node1;
				customerBalance = Ext.util.Format.number(customerBalance, '0,000,000.00');
			} else {
				customerBalance = '';
			}
			var custBalanceField = Ext.getCmp('customer-balance');
			custBalanceField.setValue(customerBalance);
			this.contractListStore.reload();
		} else {
			showErrorMessage(json.message);
		}

	},
	getCustomerBalance : function(customerCode) {
		this.waitMsgBox = Ext.MessageBox.wait('Retrieving customer info ...', 'Waiting');
		var url = contextRoot + '/jlookup?lookupId=350&dt='+ (new Date()).getTime();
		Ext.Ajax.request({
			url : url,
			autoAbort : true,
			disableCaching : true,
			success : this.getCustomerBalanceSuccess,
			failure : this.getCustomerBalanceFailed,
			method : "POST",
			scope : this,
			params : {
				customerCode : customerCode
			}
		});
	},
	createSearchTabs : function() {
		let	searchTabs = {
			xtype : 'panel',
			id : 'DeliveryOrderGridWin_search-panel',
			title : 'Searching Criteria',
			iconCls : 'fas fa-search',
			height : 220,
			collapsible : true,
			items : [ {
				layout : 'column',
				border : false,
				bodyStyle : 'text-align: left',
				defaults: {
					labelStyle: 'font-size:12px; font-weight:bold; color:#000080;'
				},
				margin : '5 5 5 5',
				items: [ {
					columnWidth : .33,
					border : false,
					height : 200,
					layout : 'form',
					bodyPadding: 5,
					items : [ {
						xtype : 'fieldset',
						layout : 'form',
						collapsible : false,
						collapsed : false,
						border : true,
						items : [ {
							layout : 'hbox',
							items : [ {
								xtype : 'panel',
								padding : '5 5 5 5',
								items : [ {
									xtype : 'textfield',
									id : 'customer-number',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Customer Num.</span>', 
									fieldStyle : 'font-weight: bold; color: #000080; text-align: left',
									allowBlank : true,
									labelWidth : 120,
									width : 300,
									value : '6728'
								} , {
									xtype : 'textfield',
									id : 'customer-location',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Customer Code</span>', 
									fieldStyle : 'background-color: #ffff66; background-image: none; font-weight: bold; color: #000080; text-align: left',
									editable : true,
									allowBlank : false, 
									labelWidth : 120,
									width : 300,
									listeners: {
										specialkey: function ( field , eOpts ){
											if ( eOpts.getKey() == eOpts.ENTER ){
												var customerCode = field.getValue();
												var delOrderSchedulerWin = Ext.getCmp('del-order-scheduler-win'); 
												delOrderSchedulerWin.getCustomerBalance ( customerCode );
											}
										},
										change: function ( datefield, newValue, oldValue, eOpts ) {
											var customerCode = field.getValue();
											var delOrderSchedulerWin = Ext.getCmp('del-order-scheduler-win'); 
											delOrderSchedulerWin.getCustomerBalance ( customerCode );
										}
									},
									value : 'VW0880'
								} , {
									xtype : 'combobox',
									id : 'contract-number',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Contract Num.</span>', 
									fieldStyle : 'font-weight: bold; color: #000080; text-align: left',
									store : this.contractListStore,
									displayField : 'node1',
									displayField : 'node1',
									valueField : 'node1',
									queryMode : 'local',
									editable : true,
									allowBlank : true, 
									labelWidth : 120,
									width : 300,
									value : ''
								} ]
							} ]
						} ]
					} ]
				}, {
					columnWidth : .33,
					border : false,
					height : 200,
					layout : 'form',
					bodyPadding: 5,
					items  : [ {
						xtype : 'fieldset',
						collapsible : false,
						collapsed : false,
						layout : 'form',
						border : true,
						items : [ {
							layout : 'hbox',
							items : [ {
								xtype : 'panel',
								padding : '5 5 5 5',
								items : [ {
									xtype : 'combobox',
									id : 'contact-line-num',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Contract Line</span>', 
									editable : true,
									allowBlank : true,
									labelWidth : 120,
									width : 400,
									value : ''
								} , {
									xtype : 'combobox',
									id : 'item-size',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Item Size</span>', 
									editable : true,
									allowBlank : true, 
									labelWidth : 120,
									width : 240,
									value : ''
								} , {
									xtype : 'combobox',
									id : 'item-length',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Item Grade</span>', 
									editable : true,
									allowBlank : true, 
									labelWidth : 120,
									width : 240,
									value : ''
								} ]
							} ]
						} ]
					} ]
				}, {
					columnWidth : .33,
					border : false,
					height : 200,
					layout : 'form',
					bodyPadding: 5,
					items : [ {
						xtype :'fieldset',
						layout: 'fit',
						collapsible : false,
						collapsed : false,
						layout : 'form',
						border : true,
						items : [ {
							layout : 'hbox',
							items : [ {
								xtype : 'panel',
								padding : '5 5 5 5',
								items : [ {
									xtype : 'textfield',
									id : 'customer-balance',
									fieldLabel : '<span style="color:#6b6b47; font-weight: bold;">Balance</span>', 
									fieldStyle : 'background-color: #ddd; background-image: none; font-weight: bold; color: #6b6b47; text-align: right',
									editable : false,
									readOnly : true,
									allowBlank : true,
									decimalPrecision : 2,
									allowDecimals : true,
									labelWidth : 120,
									width : 300,
									value : '0.00'
								} , {
									xtype : 'textfield',
									id : 'customer-currency',
									fieldLabel : '<span style="color:#6b6b47; font-weight: bold;">Currency</span>', 
									fieldStyle : 'background-color: #ddd; background-image: none; font-weight: bold; color: #6b6b47;',
									editable : false,
									readOnly : true,
									allowBlank : true, 
									labelWidth : 120,
									width : 300,
									value : 'EGP'
								} , {
									xtype : 'datefield',
									id : 'schedule-date',
									fieldLabel : '<span style="color:#000080; font-weight: bold;">Schedule Date</span>', 
									fieldStyle : 'background-color: #ffff66; background-image: none; font-weight: bold; color: #000080; text-align: center',
									editable : false,
									readOnly : false,
									allowBlank : true, 
									labelWidth : 120,
									width : 300,
									format : 'Y-m-d',
									value : '2018-05-07'
								} ]
							} ]
						} ]
					} ]
				} ]
			} ],
			buttons : [ {
				xtype : 'button',
				text : 'Search',
				baseCls : 'btn btn-primary',
				scope : this,
				handler : function() {
					var searchPanel = Ext.getCmp('DeliveryOrderGridWin_search-panel');
					searchPanel.setCollapsed( true );
					this.customerDOsStore.load ( {
						params : {
							customerCode : Ext.getCmp('customer-location').getValue(),
							contractNumber : Ext.getCmp('contract-number').getValue(),
							scheduleDate : Ext.getCmp('schedule-date').getRawValue()
						}
					} );
				}
			}, {
				xtype : 'button',
				text : 'Clear',
				baseCls : 'btn btn-danger',
				handler : function () {
				}
			} ]
		};
		return searchTabs;
	},
	createSearchResult : function() {
		this.customerDOsStore = new Ext.data.Store({
			proxy : {
				type : 'ajax',
				url : contextRoot + '/jlookup?lookupId=400',
				reader : {
					type : 'json',
					root : 'data',
					rootProperty : 'data',
					totalProperty : 'totalCount',
					successProperty : 'success'
				}
			},
			autoLoad : false
		});
		let	searchResultGrid = {
			xtype : 'gridpanel',
			id: 'del-order-scheduler-win.result',
			layout : 'fit',
			title: 'Delivery Order Schedule',
			iconCls: 'fas fa-th-list',
			store : this.customerDOsStore,
			stateful : true,
			collapsible : false,
			multiSelect : true,
			headerBorders : true,
			columnLines : true,
			stripeRows : true,
			border: true,
			dd : true,
			viewConfig : {
				plugins : {
					ptype : 'gridviewdragdrop'
				}
			},
			listeners : {
				store : {
					load : function(store, records, successful, operation, eOpts) {
						var recordCount = store.getCount();
						document.getElementById('DeliveryOrderGridWin_NumberOfDOs').innerHTML = recordCount;
						var totalWeight = 0;
						for (i = 0; i < recordCount; i++) {
							var record = store.getAt(i);
							var weight = record.get('node18');
							totalWeight = totalWeight + parseFloat(weight);
						}
						totalWeight = Ext.util.Format.number(totalWeight, '0,000,000.00');
						document.getElementById('DeliveryOrderGridWin_WeightOfDOs').innerHTML = totalWeight;
					}
				},
				beforedrop : function(node, data, dropRec, dropPosition) {
					// Get the sequence number of the record
					// dropped on
					var recordSequence = dropRec.get('node23');
					// The record being dragged
					var dragRecord = data.records[0];
					// Get the sequence number of the drag
					// record currently
					var dragRecordCurrSequence = data.records[0].get('node23');
					// Calculate what the new sequence number
					// should be for the dragged
					// row based on where it is dropped.
					if (dropPosition == 'after' && recordSequence < dragRecordCurrSequence) {
						dragRecord.set('node23', recordSequence + 1);
					} else if (dropPosition == 'before'	&& recordSequence > dragRecordCurrSequence) {
						dragRecord.set('node23', recordSequence - 1);
					} else {
						dragRecord.set('node23', recordSequence);
					}
					/*
					 * //This delays the load of the grid data
					 * until after the sync //This is not an
					 * ideal solution and an appropriate event
					 * listener would be better var delayedLoad =
					 * new Ext.util.DelayedTask(function () {
					 * data.view.store.load(); })
					 * delayedLoad.delay(250);
					 */
				}
			},
			selModel : {
				type : 'checkboxmodel',
				checkOnly : false
			},
			tbar : [ '-', {
				xtype : 'button',
				text : 'CREATE',
				width : 100,
				iconCls : 'fas fa-plus greenIcon',
				handler : function () {
					var grid = this.getView();
				}
			}, '-', {
				xtype : 'button',
				text : 'EDIT',
				width : 100,
				iconCls : 'fab fa-accusoft yellowIcon'
			}, '-', {
				xtype : 'button',
				text : 'DELETE',
				width : 100,
				iconCls : 'fas fa-trash-alt redIcon',
				handler : function () {
					var win = Ext.getCmp('del-order-scheduler-win');
					var recordsIn = win.getSelectedRecordsAsIn();
					alert( recordsIn );
				}
			}, '-', '->', '-', {
				xtype : 'button',
				text : 'VERIFY',
				width : 100,
				iconCls : 'fas fa-check-circle greenIcon'
			}, '-', {
				xtype : 'button',
				text : 'PRINT',
				width : 100,
				iconCls : 'fas fa-print purpleIcon',
				handler : function () {
					var win = Ext.getCmp('del-order-scheduler-win');
					var recordsIn = win.getSelectedRecordsAsIn();
					alert( recordsIn );
				}
			}, '-', {
				xtype : 'splitbutton',
				iconCls : 'fas fa-upload blueIcon',
				menu : {
					items : [ {
						text : '<span style="font-size:16px; font-weight: bold; color: #ffffff;">Export To</span>',
						style : 'background: #336699; padding-top: 5px; padding-bottom: 5px',
						hidden : false
					}, {
						text : 'PDF',
						iconCls : 'fas fa-file-pdf blueIcon'
					}, '-', {
						text : 'EXCEL',
						iconCls : 'fas fa-file-excel blueIcon'
					}, '-', {
						text : 'HTML',
						iconCls : 'fas fa-code blueIcon'
					} ]
				}
			}, '-', {
				xtype : 'button',
				iconCls : 'fas fa-sync-alt grayIcon',
				handler : function () {
					
				}
			}, '-' ],
			columns : [ {
				header : 'Priority',
				dataIndex : 'node23',
				sortable : true,
				hidden : true,
				align : 'center',
				width : 120,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Status',
				dataIndex : 'node25',
				sortable : true,
				hidden : true,
				align : 'center',
				width : 200,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Cust.Num',
				dataIndex : 'node1',
				sortable : true,
				hidden : true,
				align : 'center',
				width : 100,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Cust.Code',
				dataIndex : 'node2',
				sortable : true,
				hidden : true,
				align : 'center',
				width : 100,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Del.Order Num.',
				dataIndex : 'node9',
				sortable : true,
				hidden : false,
				align : 'center',
				width : 150,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #cc3300;">' + value + '</span>';
				}
			}, {
				header : 'Item Number',
				dataIndex : 'node11',
				sortable : true,
				hidden : false,
				align : 'left',
				width : 300,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Item Description',
				dataIndex : 'node12',
				sortable : true,
				hidden : false,
				align : 'left',
				width : 400,
				flex: 1,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Size',
				dataIndex : 'node13',
				sortable : true,
				hidden : false,
				align : 'center',
				width : 100,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Len',
				dataIndex : 'node14',
				sortable : true,
				hidden : true,
				align : 'center',
				width : 100,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Grade',
				dataIndex : 'node15',
				sortable : true,
				hidden : false,
				align : 'center',
				width : 100,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="color: #000080;">' + value + '</span>';
				}
			}, {
				header : 'Weight(T)',
				dataIndex : 'node18',
				sortable : true,
				hidden : false,
				align : 'right',
				width : 150,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					value = Ext.util.Format.number( parseFloat ( value ) , '0,000,000.00');
					return '<span style="font-weight: bold; color: #cc3300;">' + value + '</span>';
				}
			}, {
				header : 'Piece',
				dataIndex : 'node19',
				sortable : true,
				hidden : false,
				align : 'right',
				width : 100,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #cc3300;">' + value + '</span>';
				}
			}, {
				header : 'Contract No.',
				dataIndex : 'node3',
				sortable : true,
				hidden : false,
				align : 'left',
				width : 150,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					var contractLineNum = record.get('node4');
					return '<span style="font-weight: bold; color: #000080;">' + value + ' - ' + contractLineNum + '</span>';
				}
			}, {
				header : 'Price List',
				dataIndex : 'node5',
				sortable : true,
				hidden : true,
				align : 'left',
				width : 150,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					var contractLineNum = record.get('node6');
					return '<span style="font-weight: bold; color: #000080;">' + value + ' - ' + contractLineNum + '</span>';
				}
			}, {
				header : 'Date',
				dataIndex : 'node17',
				sortable : true,
				hidden : false,
				align : 'center',
				width : 120,
				renderer : function(value, metaData, record, rowIndex, colIndex, store) {
					return '<span style="font-weight: bold; color: #cc3300;">' + value + '</span>';
				}
			} ],
			bbar : [
				'-',
				'<span style="font-weight: bold; color: #000080">Number of DOs</span>',
				'-',
				'<span style="font-weight: bold; color: #000080" id="DeliveryOrderGridWin_NumberOfDOs">-</span>',
				'-',
				'->',
				'-',
				'<span style="font-weight: bold; color: #000080">Total Weight</span>',
				'-',
				'<span style="font-weight: bold; color: #cc3300" id="DeliveryOrderGridWin_WeightOfDOs">-</span>',
				'-' 
			]
		};
		return searchResultGrid;
	},
	createButtons : function() {
		let buttons = [ {
			xtype : 'button',
			width : 120,
			text : 'Save',
			scope : this,
			handler : function() {
			},
			baseCls : 'btn btn-primary'
		}, '->', {
			xtype : 'button',
			text : 'Close',
			width : 120,
			scope : this,
			handler : function() {
				this.close();
			},
			baseCls : 'btn btn-warning'
		} ];
		return buttons;
	},
	adjustWin : function() {
		var viewportMain = Ext.getCmp('viewport-main');
		var pageWidth = viewportMain.getSize().width;
		var pageHeight = viewportMain.getSize().height;
		var leftMargin = 0.01 * pageWidth;
		var topMargin = 0.05 * pageHeight;
		this.setPosition(leftMargin, topMargin);
		var windowWidth = pageWidth - (2 * leftMargin);
		var windowHeight = pageHeight - (2 * topMargin);
		this.setSize(windowWidth, windowHeight);
	}
} );